// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  password   String
  firstname  String
  lastname   String?
  friends     Friend[]   @relation("friends")
  friendOf         Friend[]        @relation("friendOf")
  sentRequests    FriendRequest[] @relation("sentRequests")
  receivedRequests FriendRequest[] @relation("receivedRequests")
}

model Friend {
  id         Int      @id @default(autoincrement())
  user1Id     Int
  user2Id   Int
  createdAt  DateTime @default(now())

  user       User     @relation("friends", fields: [user1Id], references: [id])
  friend     User     @relation("friendOf", fields: [user2Id], references: [id])

  @@unique([user1Id, user2Id]) // Ensures uniqueness in friendship pair
}


model FriendRequest {
  id           Int      @id @default(autoincrement())
  senderId     Int
  receiverId   Int
  status       RequestStatus @default(PENDING) // Enum for request status
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  sender       User     @relation("sentRequests", fields: [senderId], references: [id])
  receiver     User     @relation("receivedRequests", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId]) // Ensures one request per user pair
}


enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}